{"ast":null,"code":"import { renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, toDisplayString as _toDisplayString, createElementVNode as _createElementVNode, resolveComponent as _resolveComponent, createVNode as _createVNode, createCommentVNode as _createCommentVNode } from \"vue\";\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_el_image = _resolveComponent(\"el-image\");\n\n  return _openBlock(), _createElementBlock(\"table\", null, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.cats, item => {\n    return _openBlock(), _createElementBlock(\"tr\", {\n      key: item\n    }, [_createElementVNode(\"td\", null, _toDisplayString(item.color), 1\n    /* TEXT */\n    ), _createElementVNode(\"td\", null, _toDisplayString(item.location), 1\n    /* TEXT */\n    ), _createElementVNode(\"td\", null, [_createVNode(_component_el_image, {\n      class: \"catImg\",\n      src: require('../../img/catProfile/' + item.img),\n      \"preview-src-list\": _ctx.srcList\n    }, null, 8\n    /* PROPS */\n    , [\"src\", \"preview-src-list\"])]), _createCommentVNode(\" 如果只是简单的写地址是没有办法显示图片的 \")]);\n  }), 128\n  /* KEYED_FRAGMENT */\n  ))]);\n}","map":{"version":3,"mappings":";;;;uBACEA,oBASQ,OATR,EASQ,IATR,EASQ,oBARNA,oBAOKC,SAPL,EAOK,IAPL,EAOKC,YAPcC,UAOd,EAPMC,IAAY,IAAR;yBAAfJ,oBAOK,IAPL,EAOK;AAPqBK,SAAG,EAAED;AAO1B,KAPL,EAAmC,CACjCE,oBAAyB,IAAzB,EAAyB,IAAzB,EAAyBC,iBAAlBH,IAAI,CAACI,KAAa,CAAzB,EAAiB;AAAA;AAAjB,KADiC,EAEjCF,oBAA4B,IAA5B,EAA4B,IAA5B,EAA4BC,iBAArBH,IAAI,CAACK,QAAgB,CAA5B,EAAoB;AAAA;AAApB,KAFiC,EAGjCH,oBAEmC,IAFnC,EAEmC,IAFnC,EAEmC,CAF9BI,aAEyBC,mBAFzB,EAEyB;AAFfC,WAAK,EAAC,QAES;AAD7BC,SAAG,EAAEC,OAAO,2BAA2BV,IAAI,CAACW,GAAhC,CACiB;AAA7B,0BAAkBC;AAAW,KAFzB;;AAAA,kCAE8B,CAFnC,CAHiC,EAMjCC,6CANiC,CAAnC;GAOK,CAPL;;AAAA,GAQM,EATR","names":["_createElementBlock","_Fragment","_renderList","$data","item","key","_createElementVNode","_toDisplayString","color","location","_createVNode","_component_el_image","class","src","require","img","_ctx","_createCommentVNode"],"sourceRoot":"","sources":["F:\\XDUcat\\XDUcat-client\\src\\views\\SearchResultView.vue"],"sourcesContent":["<template>\r\n  <table>\r\n    <tr v-for=\"item in cats\" :key=\"item\">\r\n      <td>{{ item.color }}</td>\r\n      <td>{{ item.location }}</td>\r\n      <td> <el-image class=\"catImg\" \r\n      :src=\"require('../../img/catProfile/' + item.img)\"\r\n      :preview-src-list=\"srcList\" /></td>\r\n      <!-- 如果只是简单的写地址是没有办法显示图片的 -->\r\n    </tr>\r\n  </table>\r\n</template>\r\n\r\n<style scoped>\r\n\r\n.catImg{\r\n  width: 200px;\r\n  height: 200px;\r\n}\r\n\r\n</style>\r\n\r\n<script>\r\nexport default {\r\n  data() {\r\n    return {\r\n      cats: [],\r\n    };\r\n  },\r\n\r\n  mounted() {\r\n    this.getResult();\r\n  },\r\n\r\n  methods: {\r\n    getResult() {\r\n      this.$axios\r\n        .post(\r\n          \"http://localhost:8888/cat/findCatByColor/\" + this.$route.query.color\r\n        )\r\n        .then((resp) => {\r\n          this.cats = resp.data;\r\n        });\r\n    },\r\n  },\r\n\r\n    // 当输入的猫改变时，这里刷新页面\r\n    // 这里写的很复杂是因为为了让刷新页面自然些\r\n  watch: {\r\n    $route: {\r\n      handler: function (val, oldVal) {\r\n          if(val.path == oldVal.path)\r\n          {\r\n              if(val.query.color != oldVal.query.color){\r\n                  this.$router.replace(\"/refresh\");\r\n              }\r\n          }\r\n      },\r\n    },\r\n  },\r\n};\r\n</script>"]},"metadata":{},"sourceType":"module"}